\name{steady.plot}
\alias{steady.plot}
%- Also NEED an `\alias' for EACH other topic documented here.
\title{ ~~function to do ... ~~}
\description{
 ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
steady.plot(values, vec, labs=NULL, ylim=NULL, col=1, main="")
}
%- maybe also `usage' for other objects documented here.
\arguments{
 \item{values}{ ~~Describe \code{values} here~~ }
 \item{vec}{ ~~Describe \code{vec} here~~ }
 \item{labs}{ ~~Describe \code{labs} here~~ }
 \item{ylim}{ ~~Describe \code{ylim} here~~ }
 \item{col}{ ~~Describe \code{col} here~~ }
 \item{main}{ ~~Describe \code{main} here~~ }
}
\details{
 ~~ If necessary, more details than the __description__  above ~~
}
\value{
  ~Describe the value returned
  If it is a LIST, use
  \item{comp1 }{Description of `comp1'}
  \item{comp2 }{Description of `comp2'}
  ...
}
\references{ ~put references to the literature/web site here ~ }
\author{ ~~who you are~~ }
\note{ ~~further notes~~ }

 ~Make other sections like WARNING with \section{WARNING }{....} ~

\seealso{ ~~objects to SEE ALSO as \code{\link{~~fun~~}}, ~~~ }

\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	     or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (values, vec, labs = NULL, ylim = NULL, col = 1, main = "") 
{
    tlen <- length(vec)
    if (tlen > 20) {
        print("maximum of 20 segments allowed")
        break()
    }
    else if (tlen <= 5) 
        pict <- c(1, 5)
    else if ((tlen > 5) & (tlen <= 10)) 
        pict <- c(2, 5)
    else if ((tlen > 10) & (tlen <= 15)) 
        pict <- c(3, 5)
    else pict <- c(4, 5)
    par(mfrow = pict)
    decum <- values$index[, 1] - 1
    decum <- cbind(decum, decum)
    values$steady <- values$steady - decum
    values$index <- values$index[vec, ]
    values$index <- rbind(values$index)
    values$steady <- values$steady[vec, ]
    values$steady <- rbind(values$steady)
    for (j in 1:nrow(values$index)) {
        leftid <- values$index[j, 1]
        rightid <- values$index[j, 2]
        data <- values$data[leftid:rightid, ]
        if (any(ylim) == FALSE) 
            ylim <- range(data)
        notap <- rep(NA, ncol(data))
        newdata <- rbind(data, notap)
        datay <- c(newdata)
        nums <- c(1:nrow(data))
        nums <- c(nums, NA)
        datax <- rep(nums, ncol(data))
        datay1 <- datay[.Uminus(length(datay))]
        datax1 <- datax[.Uminus(length(datax))]
        plot(datax1, datay1, type = "l", xlab = "Number of frames", 
            ylab = "Frequency (Hz)", ylim = ylim, col = col, 
            main = main)
        abline(v = values$steady[j, 1], lty = 2)
        abline(v = values$steady[j, 2], lty = 2)
        if (any(labs)) {
            mtext(labs[j], side = 3, line = 1, at = mean(c(values$index[j, 
                1], values$index[j, 2])))
        }
    }
    invisible()
  }
}
\keyword{ ~keyword }%-- one or more ...
